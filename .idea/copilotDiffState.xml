<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/settings.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle.kts" />
              <option name="originalContent" value="// Settings configured for Gradle 8.14.3 and Java 24&#10;@file:Suppress(&quot;UnstableApiUsage&quot;)&#10;&#10;// Enable Gradle features&#10;enableFeaturePreview(&quot;TYPESAFE_PROJECT_ACCESSORS&quot;)&#10;enableFeaturePreview(&quot;STABLE_CONFIGURATION_CACHE&quot;)&#10;&#10;// Plugin Management&#10;pluginManagement {&#10;    repositories {&#10;        gradlePluginPortal()&#10;        google()&#10;        mavenCentral()&#10;        maven(url = &quot;https://maven.pkg.jetbrains.space/public/p/compose/dev&quot;)&#10;        maven(url = &quot;https://jitpack.io&quot;)&#10;    }&#10;&#10;    // Configure resolution strategy for plugins&#10;    resolutionStrategy {&#10;        eachPlugin {&#10;            when {&#10;                // Android plugins&#10;                requested.id.namespace == &quot;com.android&quot; -&gt; &#10;                    useModule(&quot;com.android.tools.build:gradle:${requested.version}&quot;)&#10;                &#10;                // Kotlin plugins - using hardcoded version for now&#10;                requested.id.namespace?.startsWith(&quot;org.jetbrains.kotlin&quot;) == true -&gt; {&#10;                    // Using hardcoded version as a fallback&#10;                    useVersion(&quot;2.2.0&quot;)&#10;                }&#10;                    &#10;                // KSP plugin&#10;                requested.id.id == &quot;com.google.devtools.ksp&quot; -&gt;&#10;                    useModule(&quot;com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:${requested.version}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Dependency Resolution Management&#10;dependencyResolutionManagement {&#10;    repositories {&#10;        gradlePluginPortal()&#10;        google()&#10;        mavenCentral()&#10;        maven(url = &quot;https://maven.pkg.jetbrains.space/public/p/compose/dev&quot;)&#10;        maven(url = &quot;https://jitpack.io&quot;)&#10;    }&#10;    versionCatalogs {&#10;        create(&quot;libs&quot;) {&#10;            from(files(&quot;gradle/libs.versions.toml&quot;))&#10;        }&#10;    }&#10;    versionCatalogs {&#10;        create(&quot;libs&quot;) {&#10;            from(files(&quot;gradle/libs.versions.toml&quot;))&#10;        }&#10;    }&#10;    versionCatalogs {&#10;        create(&quot;libs&quot;) {&#10;            from(files(&quot;gradle/libs.versions.toml&quot;))&#10;        }&#10;    }&#10;    versionCatalogs {&#10;        create(&quot;libs&quot;) {&#10;            from(files(&quot;gradle/libs.versions.toml&quot;))&#10;        }&#10;    }&#10;    versionCatalogs {&#10;        create(&quot;libs&quot;) {&#10;            from(files(&quot;gradle/libs.versions.toml&quot;))&#10;        }&#10;    }&#10;    versionCatalogs {&#10;        create(&quot;libs&quot;) {&#10;            from(files(&quot;gradle/libs.versions.toml&quot;))&#10;        }&#10;    }&#10;    versionCatalogs {&#10;        create(&quot;libs&quot;) {&#10;            from(files(&quot;gradle/libs.versions.toml&quot;))&#10;        }&#10;    }&#10;    versionCatalogs {&#10;        create(&quot;libs&quot;) {&#10;            from(files(&quot;gradle/libs.versions.toml&quot;))&#10;        }&#10;    }&#10;}&#10;&#10;rootProject.name = &quot;AuraFrameFX&quot;&#10;&#10;// Include all modules&#10;listOf(&#10;    &quot;:app&quot;,&#10;    &quot;:jvm-test&quot;,&#10;    &quot;:collab-canvas&quot;&#10;).forEach { include(it) }&#10;&#10;// Configure all projects to use standard build.gradle.kts&#10;rootProject.children.forEach { project -&gt;&#10;    // Always use standard build.gradle.kts for all modules&#10;    project.buildFileName = &quot;build.gradle.kts&quot;&#10;    &#10;    // Ensure the build file exists&#10;    val buildFile = project.projectDir.resolve(&quot;build.gradle.kts&quot;)&#10;    if (!buildFile.exists()) {&#10;        buildFile.parentFile?.mkdirs()&#10;        buildFile.createNewFile()&#10;        buildFile.writeText(&quot;// ${project.name} build configuration\n&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// Settings configured for Gradle 8.14.3 and Java 24&#10;@file:Suppress(&quot;UnstableApiUsage&quot;)&#10;&#10;// Enable Gradle features&#10;enableFeaturePreview(&quot;TYPESAFE_PROJECT_ACCESSORS&quot;)&#10;enableFeaturePreview(&quot;STABLE_CONFIGURATION_CACHE&quot;)&#10;&#10;// Plugin Management&#10;pluginManagement {&#10;    repositories {&#10;        gradlePluginPortal()&#10;        google()&#10;        mavenCentral()&#10;        maven(url = &quot;https://maven.pkg.jetbrains.space/public/p/compose/dev&quot;)&#10;        maven(url = &quot;https://jitpack.io&quot;)&#10;    }&#10;&#10;    // Configure resolution strategy for plugins&#10;    resolutionStrategy {&#10;        eachPlugin {&#10;            when {&#10;                // Android plugins&#10;                requested.id.namespace == &quot;com.android&quot; -&gt; &#10;                    useModule(&quot;com.android.tools.build:gradle:${requested.version}&quot;)&#10;                &#10;                // Kotlin plugins - using hardcoded version for now&#10;                requested.id.namespace?.startsWith(&quot;org.jetbrains.kotlin&quot;) == true -&gt; {&#10;                    // Using hardcoded version as a fallback&#10;                    useVersion(&quot;2.2.0&quot;)&#10;                }&#10;                    &#10;                // KSP plugin&#10;                requested.id.id == &quot;com.google.devtools.ksp&quot; -&gt;&#10;                    useModule(&quot;com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:${requested.version}&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Dependency Resolution Management&#10;dependencyResolutionManagement {&#10;    repositories {&#10;        gradlePluginPortal()&#10;        google()&#10;        mavenCentral()&#10;        maven(url = &quot;https://maven.pkg.jetbrains.space/public/p/compose/dev&quot;)&#10;        maven(url = &quot;https://jitpack.io&quot;)&#10;    }&#10;}&#10;&#10;rootProject.name = &quot;AuraFrameFX&quot;&#10;&#10;// Include all modules&#10;listOf(&#10;    &quot;:app&quot;,&#10;    &quot;:jvm-test&quot;,&#10;    &quot;:collab-canvas&quot;&#10;).forEach { include(it) }&#10;&#10;// Configure all projects to use standard build.gradle.kts&#10;rootProject.children.forEach { project -&gt;&#10;    // Always use standard build.gradle.kts for all modules&#10;    project.buildFileName = &quot;build.gradle.kts&quot;&#10;    &#10;    // Ensure the build file exists&#10;    val buildFile = project.projectDir.resolve(&quot;build.gradle.kts&quot;)&#10;    if (!buildFile.exists()) {&#10;        buildFile.parentFile?.mkdirs()&#10;        buildFile.createNewFile()&#10;        buildFile.writeText(&quot;// ${project.name} build configuration\n&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>